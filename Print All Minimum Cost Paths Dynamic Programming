//Print All Minimum Cost Paths Dynamic Programming
#include<bits/stdc++.h>
using namespace std;

class Pair{
public:
    string psf;
    int i;
    int j;

    Pair(string ipsf,int ii,int ij){
        psf = ipsf;
        i = ii;
        j = ij;
    }
};

void solve(vector<vector<int>>arr){

    vector<vector<int>>dp(arr.size(),vector<int>(arr[0].size()));

    for(int i=arr.size()-1;i>=0;i--){
        for(int j=arr[0].size()-1;j>=0;j--){
            if(i == arr.size()-1 && j == arr[0].size()-1){
                dp[i][j]=arr[i][j];
            }
            else if(i==arr.size()-1){
                dp[i][j]=dp[i][j+1]+arr[i][j];
            }
            else if(j == arr[0].size()-1){
                dp[i][j]=dp[i+1][j]+arr[i][j];
            }
            else{
                dp[i][j] = arr[i][j] + min(dp[i+1][j],dp[i][j+1]);
            }
        }
    }

    cout<<dp[0][0]<<endl;


    queue<Pair>q;

    q.push(Pair("",0,0));

    while(!q.empty()){
        Pair t = q.front();
        q.pop();
        // cout<<t.i<<" "<<t.j<<" "<<t.psf<<endl;

        if(t.i==arr.size()-1 && t.j == arr[0].size()-1){
            cout<<t.psf<<endl;
        }else if(t.i == arr.size()-1){
            q.push(Pair(t.psf+"R",t.i,t.j+1));
        }
        else if(t.j == arr[0].size()-1){
            q.push(Pair(t.psf+"D",t.i+1,t.j));
        }
        else {
            if(dp[t.i][t.j+1]==dp[t.i+1][t.j]){
                q.push(Pair(t.psf+"D",t.i+1,t.j));
                q.push(Pair(t.psf+"R",t.i,t.j+1));
            }
            else if(dp[t.i][t.j+1]>dp[t.i+1][t.j]){
                q.push(Pair(t.psf+"D",t.i+1,t.j));
            }
            else if(dp[t.i][t.j+1]<dp[t.i+1][t.j]){
                q.push(Pair(t.psf+"R",t.i,t.j+1));
            }
        }
    }
}

int main()
{
    vector<vector<int>> arr(5,vector<int>(5));

    for(int i=0;i<5;i++){
        for(int j=0;j<5;j++){
            cin>>arr[i][j];
        }
    }

    solve(arr);
}
