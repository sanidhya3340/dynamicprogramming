//Largest Square Submatrix of all 1's
#include<bits/stdc++.h>
using namespace std;

int solve(int arr[][6],int n,int m){
    int dp[n][m];
    int max=1;

    for(int i=n-1;i>=0;i--){
        for(int j=m-1;j>=0;j--){


            if(i==n-1 && j==m-1){
                dp[n-1][m-1]=arr[i][j];
            }
            else if(i==n-1){
                dp[i][j]=arr[i][j];
            }else if(j==m-1){
                dp[i][j]=arr[i][j];
            }else{
                if(arr[i][j]==0){
                    dp[i][j]=0;
                }
                else{
                    int mn = min(min(dp[i+1][j],dp[i+1][j+1]),dp[i][j+1]);
                    dp[i][j]=mn+1;

                    if(dp[i][j]>max)
                        max = dp[i][j];
                }
            }

        }
    }

    return max;
}

int main()
{

   int arr[5][6];
   int n = 5,m = 6;

   for(int i=0;i<n;i++){
    for(int j=0;j<m;j++){
        cin>>arr[i][j];
    }
   }

   cout<<solve(arr,n,m);

}
